#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 10, 2018 05:49:23 AM
#    May 10, 2018 06:40:48 PM
#    May 10, 2018 07:43:01 PM
#    May 10, 2018 07:55:14 PM
#    May 10, 2018 09:33:27 PM
#    May 13, 2018 01:56:43 AM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False

except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import threading, time, base4
        
from tkinter import filedialog

#Para usar OpenGL
from OpenGL.GLUT import *
from OpenGL.GL import *
from OpenGL.GLU import *


def set_Tk_var():
    global stepCounter
    global finalizar
    global parar
    global spinbox
    spinbox = StringVar()
    global intervalo
    global candado
    stepCounter = StringVar()
    finalizar=StringVar()
    parar=StringVar()
    intervalo=0.0001
    


def CambioEscala(p1):
    print('EDCA_support.CambioEscala')
    sys.stdout.flush()

def salvaModelo(p1):
    print('EDCA_support.salvaModelo')
    sys.stdout.flush()

def startModel(p1):
    parar.set("0")
    #candado.release()
    #seg_plano = AsyncClock()
    #seg_plano.start()
    #sp=OpenGlThread()
    #sp.start()
    #mo = mainOpenGL()
    #mo.start()
    print('EDCA_support.startModel')
    sys.stdout.flush()

def stopModel(p1):
    #candado.acquire()
    parar.set("1")
    print('EDCA_support.stopModel')
    sys.stdout.flush()

def abrir_file():
    global ruleList,lattice,quanta, mo,candado
    global mouseIniX, mouseIniY,mouseX,mouseY,mouseAbajo
    mouseIniX,mouseIniY,mouseX,mouseY,mouseAbajo=0.0,0.0,0.0,0.0,0
    candado.acquire()
    try:
        if mo.isAlive:
            parar.set("1")
            finalizar.set("1")
            mo._stop
            mo._delete
    except NameError:
        pass
    fd=filedialog
    fichero=fd.askopenfilename(defaultextension=".mex",filetypes=[("Edca model", "*.mex")])
    print(fichero)
    lattice=base4.CellSpace()
    ruleList=base4.rules()
    quanta=base4.qSpace()
    base4.abrir(fichero,ruleList,lattice,quanta)
    stepCounter.set("0")
    parar.set("1")
    candado.release()
    
    #candado.acquire()

    mo = mainOpenGL(daemon=True)
    finalizar.set("0")
    mo.start()
   

    w.Canvas1.delete("A")
    for k,v in lattice.grid.items(): 
        #print(k,v.valor)
        x,y=k
        cid=w.Canvas1.create_rectangle(4*int(x),4*int(y),4*(int(x)+1),4*(int(y)+1))
        w.Canvas1.addtag_withtag("A", cid)

    sys.stdout.flush()


class AsyncClock(threading.Thread):
    def run(self):
        b=quanta.quanta
        for paso in range(1000):
            if parar.get()=="1": break
            tiempo=time.process_time()
            stepCounter.set(str(int(stepCounter.get())+1))
            #Inicio de un step del CA
            lattice.newBornCandidates()
            for k in b:
                k.procesarCeldas1(lattice,ruleList)
            lattice.actualiza()
            #Fin del step
            w.Canvas1.delete("A")
            for k,v in lattice.grid.items(): 
                #print(k,v.valor)
                x,y=k
                cid=w.Canvas1.create_rectangle(4*int(x),4*int(y),4*(int(x)+1),4*(int(y)+1))
                w.Canvas1.addtag_withtag("A", cid)
                
            #for i,k in enumerate(b): 
                #print(i,base4.b4(k.regla),k.valor,k.origen,k.spin)
            
            #time.sleep(0.001)
            while time.process_time()-tiempo<0.00001: pass
            
    
class OpenGlThreadTeaPot(threading.Thread): #Ejemplo
    def run(self):
        def draw():
            glClear(GL_COLOR_BUFFER_BIT)
            glutWireTeapot(0.5)
            glFlush()
        glutInit(sys.argv)
        glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
        glutInitWindowSize(250, 250)
        glutInitWindowPosition(100, 100)
        glutCreateWindow("My Second OGL Program")
        glutDisplayFunc(draw)
        glutMainLoop()
        
class mainOpenGL(threading.Thread):
    def mouse(self,button, state, x, y):
        global mouseAbajo,mouseIniX,mouseIniY,mouseX,mouseY
        if button == GLUT_LEFT_BUTTON and state == GLUT_DOWN:
            mouseIniX=mouseX=x
            mouseIniY=mouseY=y
            mouseAbajo=1
        if button == GLUT_LEFT_BUTTON and state == GLUT_UP:
            mouseIniX=mouseX=x
            mouseIniY=mouseY=y
            mouseAbajo=0
    def mousemotion(self,x,y):
        global mouseX,mouseIniX
        global mouseY,mouseIniY
        mouseX = x
        mouseY = y
        glTranslate((mouseX-mouseIniX)/1000.0,(mouseIniY-mouseY)/1000.0,0)
        mouseIniX=mouseX=x
        mouseIniY=mouseY=y

    def initGraphic(self):
        glClearColor(0.0, 0.0, 0.0, 1.0)
        gluOrtho2D(0.0, 1.0, 0.0, 1.0)
        
    def plotpoints(self):
        global candado
        candado.acquire()
        b=quanta.quanta
        if not finalizar.get()=="1":
            #if finalizar.get()=="1":return
            #candado.acquire()
            #candado.release()
            
            if parar.get()=="0":
                #tiempo=time.process_time()
                stepCounter.set(str(int(stepCounter.get())+1))
                #Inicio de un step del CA
                lattice.newBornCandidates()
                for k in b:
                    k.procesarCeldas1(lattice,ruleList)
                lattice.actualiza()
                #Fin del step
                #while time.process_time()-tiempo<0.00000001: pass
                #print(time.process_time()-tiempo)
                #time.sleep(intervalo)
            glClear(GL_COLOR_BUFFER_BIT)
            glColor3f(1.0, 1.0, 1.0)
            print(mouseAbajo,mouseIniX,mouseX,mouseIniY,mouseY)
            #if mouseAbajo: glTranslate((mouseX-mouseIniX)/1000.0,(mouseY-mouseIniY)/1000.0,0)
            glBegin(GL_QUADS)
            sc=float(spinbox.get())
            for k,v in lattice.grid.items(): 
                x,y=k
                #glVertex2f(float(x)/1000.0, float(y)/1000.0)
                glVertex2f(sc*float(x)/1000.0, sc*float(y)/1000.0)
                glVertex2f(sc*float(x)/1000.0, sc*float(y+1)/1000.0)
                glVertex2f(sc*float(x+1)/1000.0, sc*float(y+1)/1000.0)
                glVertex2f(sc*float(x+1)/1000.0, sc*float(y)/1000.0)
            glEnd()
            glFlush()
        candado.release()
    def display(self):
        pass
    def run(self):
        glutInit(sys.argv)
        glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB)
        glutInitWindowSize(500,500)
        glutInitWindowPosition(50,50)
        glutCreateWindow("Running EDCA...")
        glutDisplayFunc(self.display)
        glutIdleFunc(self.plotpoints)
        glutMotionFunc(self.mousemotion)
        glutMouseFunc(self.mouse)
        self.initGraphic()
        glutMainLoop()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, candado
    w = gui
    top_level = top
    root = top
    stepCounter.set(1)
    spinbox.set(3)
    candado=threading.Lock()

def destroy_window():
    # Function which closes the window.
    finalizar.set("1")
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import EDCA
    EDCA.vp_start_gui()



















