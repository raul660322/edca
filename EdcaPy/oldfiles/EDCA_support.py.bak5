#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 10, 2018 05:49:23 AM
#    May 10, 2018 06:40:48 PM
#    May 10, 2018 07:43:01 PM
#    May 10, 2018 07:55:14 PM
#    May 10, 2018 09:33:27 PM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False

except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import threading, time, base4
        
from tkinter import filedialog

def set_Tk_var():
    global stepCounter
    global inicio
    global parar
    stepCounter = StringVar()
    inicio=StringVar()
    parar=StringVar()

def salvaModelo(p1):
    print('EDCA_support.salvaModelo')
    sys.stdout.flush()

def startModel(p1):
    parar.set("")
    seg_plano = AsyncClock(ruleList,lattice,quanta)
    seg_plano.start()
    print('EDCA_support.startModel')
    sys.stdout.flush()

def stopModel(p1):
    parar.set("1")
    print('EDCA_support.stopModel')
    sys.stdout.flush()

def abrir_file():
    global ruleList,lattice,quanta
    fd=filedialog
    fichero=fd.askopenfilename(defaultextension=".mex",filetypes=[("Edca model", "*.mex")])
    print(fichero)
    lattice=base4.CellSpace()
    ruleList=base4.rules()
    quanta=base4.qSpace()
    base4.abrir(fichero,ruleList,lattice,quanta)
    sys.stdout.flush()


class AsyncClock(threading.Thread):
    def run(self,ruleList,lattice,quanta):
        b=quanta.quanta
        for paso in range(1000):
            if parar.get()=="1": break
            stepCounter.set(str(int(stepCounter.get())+1))
            #Inicio de un step del CA
            lattice.newBornCandidates()
            for k in b:
                k.procesarCeldas1(lattice,ruleList)
            lattice.actualiza()
            #Fin del step
            for k,v in lattice.grid.items(): print(k,v.valor)
            for i,k in enumerate(b): 
                print(i,base4.b4(k.regla),k.valor,k.origen,k.spin)
            
            time.sleep(0.1)
        
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    stepCounter.set(1)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import EDCA
    EDCA.vp_start_gui()
















